@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ICoffeesService CoffeesService
@inject IShoppingCartsService ShoppingCartsService
@inject IToastService ToastService

<EditForm Model="_model" OnValidSubmit="OnSubmitAsync">

    <ErrorsList ShowErrors="_showErrors" Errors="_errors" />
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-row">

        <div class="form-group col-md flex-grow-0">
            <label>Количество</label>
            <div class="input-group mb-3 input-spinner">
                <div class="input-group-prepend">
                    <button @onclick="DecrementQuantity" class="btn btn-light" type="button" id="button-minus"> &minus; </button>
                </div>
                <input @bind-value="_model.Quantity" type="text" class="form-control" />
                <div class="input-group-append">
                    <button @onclick="IncrementQuantity" class="btn btn-light" type="button" id="button-plus"> + </button>
                </div>
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-md">
            <button type="submit" class="btn btn-primary">
                <span class="text">Добавить в корзину</span>
            </button>

            <AuthorizeView Roles="@Constants.AdminRole" Context="Auth">
                <a href="/coffees/update/@CoffeeId"
                   class="btn btn-outline-warning">
                    Редактировать
                </a>

                <a @onclick:preventDefault
                @onclick="() => OnDeleteAsync()"
                   href=""
                   class="btn btn-outline-danger">
                    Удалить
                </a>
            </AuthorizeView>
        </div>
    </div>
</EditForm>



@code{
    private readonly ShoppingCartRequestModel _model = new();

    private bool _showErrors;
    private IEnumerable<string>? _errors;

    [Parameter]
    public int CoffeeId { get; set; }

    [Parameter]
    public string CoffeeName { get; set; }

    private async Task OnSubmitAsync()
    {
        _model.CoffeeId = CoffeeId;
        var result = await ShoppingCartsService.AddItem(_model);

        if (!result.IsSuccessful)
        {
            _errors = result.Errors;
            _showErrors = true;
        }
        else
        {
            _showErrors = false;
            NavigationManager.NavigateTo("/cart", forceLoad: true);
        }
    }

    private void DecrementQuantity()
    {
        if (_model.Quantity > 1)
        {
            --_model.Quantity;
            _showErrors = false;
        }
    }

    private void IncrementQuantity()
    {
        ++_model.Quantity;
        _showErrors = false;
    }

    private async Task OnDeleteAsync()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>(
            "confirm",
            "Удалить эту запись?");

        if (confirmed)
        {
            var result = await this.CoffeesService.DeleteAsync(CoffeeId);

            if (result.IsSuccessful)
            {
                this.ToastService.ShowSuccess($"Товар {CoffeeName} был удалён.");
                this.NavigationManager.NavigateTo("/coffees");
            }
            else
            {
                _errors = result.Errors;
                _showErrors = true;
            }
        }
    }
}