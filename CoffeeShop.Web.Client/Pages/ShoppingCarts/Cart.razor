@page "/cart"
@attribute [Authorize]
@inject IShoppingCartsService ShoppingCartsService
@inject NavigationManager NavigationManager

@if (_cartItems == null)
{
    <span>Загрузка...</span>
}
else
{
    <section class="section-pagetop bg">
        <div class="container">
            <h2 class="title-page">Корзина</h2>
        </div>
    </section>

    <section class="section-content padding-y">
        <div class="container">

            <div class="row">
                <main class="col-md-9">
                    <div class="card">

                        <table class="table table-borderless table-shopping-cart">
                            <thead class="text-muted">
                                <tr class="small text-uppercase">
                                    <th scope="col">Товар</th>
                                    <th scope="col" width="200">Количество</th>
                                    <th scope="col" width="120">Стоимость</th>
                                    <th scope="col" class="text-right" width="200"> </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in _cartItems)
                                {
                                    <tr>
                                        <td>
                                            <figure class="itemside">
                                                @*<div class="aside"><img src="@product.ImageSource" class="img-sm"></div>*@
                                                <figcaption class="info">
                                                    <a href="/coffees/@item.CoffeeId" class="title text-dark">
                                                        @item.CoffeeName
                                                    </a>
                                                </figcaption>
                                            </figure>
                                        </td>
                                        <td>
                                            <div class="input-group input-spinner">
                                                <div class="input-group-prepend">
                                                    <button @onclick="() => DecrementQuantity(item.CoffeeId, item.Quantity)"
                                                            class="btn btn-light"
                                                            type="button"
                                                            id="button-minus">
                                                        &minus;
                                                    </button>
                                                </div>
                                                <input @bind-value="@item.Quantity" type="text" class="form-control" readonly />
                                                <div class="input-group-append">
                                                    <button @onclick="() => IncrementQuantity(item.CoffeeId, item.Quantity)"
                                                            class="btn btn-light"
                                                            type="button"
                                                            id="button-plus">
                                                        +
                                                    </button>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="price-wrap">
                                                <var class="price">RUB @(item.UnitSellPriceRoubles * item.Quantity)</var>
                                                <small class="text-muted"> RUB @item.UnitSellPriceRoubles шт. </small>
                                            </div>
                                        </td>
                                        <td class="text-right">
                                            <a @onclick="() => OnRemoveAsync(item.CoffeeId)"
                                               @onclick:preventDefault
                                               href="#"
                                               class="btn btn-light">
                                               Убрать из корзины
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="card-body border-top">

                            @if (_cartItems.Any())
                            {
                                <a href="/checkout" class="btn btn-primary float-md-right"> Оформить заказ </a>
                            }

                            <a href="/coffees" class="btn btn-light"> Продолжить покупки </a>
                        </div>
                    </div>

                </main>
                <aside class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <dl class="dlist-align">
                                <dt>Итог:</dt>
                                <dd class="text-right  h5"><strong>RUB @_totalPrice</strong></dd>
                            </dl>
                            <hr>
                        </div>
                    </div>
                </aside>
            </div>

        </div>
    </section>
}


@code{
    private readonly ShoppingCartRequestModel _model = new();
    private decimal _totalPrice;

    private IEnumerable<CartItem>? _cartItems;

    protected override async Task OnInitializedAsync() 
        => await LoadDataAsync();

    private async Task LoadDataAsync()
    {
        var cartItems = await ShoppingCartsService.GetMyItems();
        _totalPrice = cartItems.Sum(i => i.UnitSellPriceRoubles * i.Quantity);
        _cartItems = cartItems.Select(i => new CartItem(i));
    }

    private async Task OnRemoveAsync(int coffeeId)
    {
        await ShoppingCartsService.RemoveItem(coffeeId);
        NavigationManager.NavigateTo("/cart", forceLoad: true);
    }

    private async Task IncrementQuantity(int coffeeId, int quantity)
    {
        _model.CoffeeId = coffeeId;
        _model.Quantity = quantity;

        ++_model.Quantity;
        await ShoppingCartsService.UpdateItem(_model);
        await LoadDataAsync();
    }

    private async Task DecrementQuantity(int coffeeId, int quantity)
    {
        _model.CoffeeId = coffeeId;
        _model.Quantity = quantity;

        if (_model.Quantity - 1 > 0)
        {
            --_model.Quantity;
            await ShoppingCartsService.UpdateItem(_model);
            await LoadDataAsync();
        }
    }

    private class CartItem
    {
        public int CoffeeId { get; set; }
        public string CoffeeName { get; set; }
        public decimal UnitSellPriceRoubles { get; set; }
        public int Quantity { get; set; }

        public CartItem(ShoppingCartItemResponseModel model)
        {
            (CoffeeId, CoffeeName, UnitSellPriceRoubles, Quantity) 
                = (model.CoffeeId, model.CoffeeName, model.UnitSellPriceRoubles, model.Quantity);
        }
    }
}